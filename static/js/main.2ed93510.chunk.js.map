{"version":3,"sources":["api/baseUrl.js","components/InputError.jsx","validation/loginRegisterValidation.js","context/EmpDataContext.js","pages/EmpForm.jsx","pages/DataTable.jsx","components/Navbar.jsx","App.js","index.js"],"names":["baseurl","axios","create","baseURL","InputError","props","useState","setStartShowing","validatenow","message","className","onAnimationStart","e","target","style","display","onAnimationEnd","transition","transform","backgroundColor","fontSize","boxShadow","animation","no_digit_regex","digit_regex","space_regex","password_length_regex","alpha_numeric_regex","email_regex","validateCombo","value","rules","val","toString","trim","includes","match","empdatacontext","createContext","EmpDataProvider","_id","empcode","name","department","gender","dob","joiningdate","previousexp","salary","address","update","showAlert","alertType","alertMsg","records","empdata","setEmpData","Provider","children","formerror","empcodeerror","nameerror","departmenterror","gendererror","doberror","joiningdateerror","previousexperror","salaryerror","addresserror","EmpForm","navigate","useNavigate","showalert","setShowAlert","setValidateNow","useContext","empdataerror","setEmpDataError","checkValidity","error","prevState","isObjectEmpty","obj","Object","entries","map","console","log","resetFrom","id","resetFormError","handleChange","persist","onUpdateHandler","a","preventDefault","JSON","stringify","updatteddata","patch","res","onSubmitHandler","submitteddata","post","onClick","cursor","textShadow","Container","Form","noValidate","autoComplete","onSubmit","Row","Group","as","Col","md","Label","Control","type","onFocus","onChange","placeholder","Check","inline","label","checked","Button","DataTable","refresh","setRefresh","useEffect","fetchAllRecords","get","data","formateDate","deleteRecord","delete","datetime","reverse","date","Date","newdate","getFullYear","getMonth","getDate","split","length","join","maxWidth","Table","striped","bordered","hover","size","responsive","colSpan","record","key","to","variant","filter","Navbar","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ed93510.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseurl = axios.create( {\r\n    baseURL: 'http://localhost:5000/api/v1/'\r\n} )\r\n\r\nexport default baseurl","import React,{ useState } from 'react'\r\n\r\nconst InputError = ( props ) => {\r\n\r\n    const [ startshowing,setStartShowing ] = useState( false )\r\n\r\n    // const toggleshowing = () => setStartShowing( true )\r\n\r\n    // const controlAnimation = () => {\r\n    //     if ( props.message ) {\r\n    //         toggleshowing()\r\n    //         return 'expand-inputerror'\r\n    //     }\r\n    //     if ( startshowing )\r\n    //         return 'expand-inputerror-reverse'\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            { props.validatenow && props.message && <p className='text-danger px-1 overflow-hidden position-absolute ' onAnimationStart={ ( e ) => { if ( props.message ) setStartShowing( true ); e.target.style.display = 'block' } } onAnimationEnd={ ( e ) => !props.message && ( e.target.style.display = 'none' ) }\r\n                style={ {\r\n                    transition: 'all 0.3s ',transform: 'perspective(300px) rotateX(20deg) ',\r\n                    backgroundColor: 'lightpink',fontSize: '13px',boxShadow: '0px 8px 1px -5px rgba(0,0,0,.3)',\r\n                    // animation: `${props.validatenow && ( ( props.message && 'expand-inputerror' ) || ( startshowing && 'expand-inputerror-reverse' ) )} 0.5s ease-in-out `,\r\n                    animation: ` expand-inputerror 0.5s ease-in-out `,\r\n                } }>\r\n                { props.message }\r\n            </p> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InputError","const no_digit_regex = /\\d/g;\r\nconst digit_regex = /\\D/g;\r\nconst space_regex = /\\W/g;\r\nconst password_length_regex = /^.{6,20}$/g;\r\nconst alpha_numeric_regex = /^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$/g;\r\nconst email_regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\nfunction validateCombo ( value,rules ) {\r\n    // console.log(value)\r\n    // console.log(typeof value)\r\n    // const val = (typeof value === 'string') ? value.trim() : value.toString().trim()\r\n    const val = value.toString().trim()\r\n    // const val=value\r\n    // console.log( val )\r\n    if ( rules.includes( 'REQUIRED' ) && val === '' ) return ( 'This Field is required' )\r\n    if ( rules.includes( 'ALPHANUMERIC' ) && val.match( alpha_numeric_regex ) ) return ( 'only alphanumeric characters' )\r\n    if ( rules.includes( 'NODIGIT' ) && val.match( no_digit_regex ) ) return ( 'No digits are allowed' )\r\n    if ( rules.includes( 'DIGIT' ) && val.match( digit_regex ) ) return ( 'Only digits are allowed' )\r\n    if ( rules.includes( 'NOSPACE' ) && val.match( space_regex ) ) return ( 'Space not allowed' )\r\n    if ( rules.includes( 'EMAIL' ) && !val.match( email_regex ) ) return ( 'Invalid email' )\r\n    if ( rules.includes( '6-20' ) && !val.match( password_length_regex ) ) return ( 'Password should be 6-20 characters long' )\r\n    return ''\r\n}\r\n\r\nfunction validateCode ( Code ) {\r\n    const alpha_numeric_regex = /^[ A-Za-z0-9]*/;\r\n    if ( Code === '' ) return ( 'Code is required' )\r\n    if ( Code.match( alpha_numeric_regex ) ) return ( 'only alphanumeric characters' )\r\n    return ''\r\n}\r\nfunction validateFullname ( fullname ) {\r\n    const digit_regex = /\\d/g;\r\n    const space_regex = /\\W/g;\r\n    if ( fullname === '' ) return ( 'Fullname is required' )\r\n    if ( fullname.match( digit_regex ) ) return ( 'No digits are allowed' )\r\n    if ( fullname.match( space_regex ) ) return ( 'Space not allowed' )\r\n    return ''\r\n}\r\nfunction validateEmail ( email ) {\r\n    const email_regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if ( email === '' ) return ( 'Email is required' )\r\n    if ( !email.match( email_regex ) ) return ( 'Invalid email' )\r\n    return ''\r\n}\r\nfunction validatePassword ( password ) {\r\n    const password_length_regex = /^.{6,20}$/g;\r\n    if ( password === '' ) return ( 'Password is required' )\r\n    if ( !password.match( password_length_regex ) ) return ( 'Password should be 6-20 characters long' )\r\n    return ''\r\n}\r\nfunction validateCPassword ( cpassword,password ) {\r\n    if ( cpassword === '' ) return ( 'Confirm Password is required' )\r\n    return ''\r\n}\r\nfunction validateIAgree ( iagree ) {\r\n    if ( !iagree ) return ( 'agree the terms and conditions' )\r\n    return ''\r\n}\r\n\r\nexport { validateFullname,validateEmail,validatePassword,validateIAgree,validateCPassword,validateCode,validateCombo }","import React,{ createContext, useState } from 'react'\r\nexport const empdatacontext = createContext()\r\n\r\nconst EmpDataProvider = ( props ) => {\r\n    const [ empdata,setEmpData ] = useState( {\r\n        _id: '',\r\n        empcode: '',\r\n        name: '',\r\n        department: '',\r\n        gender: '',\r\n        dob: '',\r\n        joiningdate: '',\r\n        previousexp: '',\r\n        salary: '',\r\n        address: '',\r\n        update: false,\r\n        showAlert: false,\r\n        alertType: 'success',\r\n        alertMsg: '',\r\n        records: [],\r\n    } )\r\n\r\n    return (\r\n        <empdatacontext.Provider value={ { empdata,setEmpData } }>\r\n            { props.children }\r\n        </empdatacontext.Provider>\r\n    )\r\n}\r\n\r\nexport default EmpDataProvider","import React,{ useContext,useEffect,useState } from 'react'\r\nimport axios from '../api/baseUrl'\r\nimport { Row,Col,Form,Table,Alert,Button,Container } from 'react-bootstrap'\r\nimport InputError from '../components/InputError'\r\nimport { validateCombo } from '../validation/loginRegisterValidation.js'\r\nimport { empdatacontext } from '../context/EmpDataContext'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\nconst formerror = {\r\n    empcodeerror: '',\r\n    nameerror: '',\r\n    departmenterror: '',\r\n    gendererror: '',\r\n    doberror: '',\r\n    joiningdateerror: '',\r\n    previousexperror: '',\r\n    salaryerror: '',\r\n    addresserror: '',\r\n}\r\n\r\nconst EmpForm = () => {\r\n    const navigate = useNavigate()\r\n\r\n    const [ showalert,setShowAlert ] = useState( false )\r\n\r\n    const [ validatenow,setValidateNow ] = useState( false )\r\n\r\n    const { empdata,setEmpData } = useContext( empdatacontext )\r\n\r\n    const [ empdataerror,setEmpDataError ] = useState( formerror )\r\n\r\n\r\n\r\n    const checkValidity = ( name,value ) => {\r\n        let error\r\n        if ( name === 'empcode' ) error = validateCombo( value,[ 'REQUIRED','ALPHANUMERIC','NOSPACE' ] )\r\n        if ( name === 'name' ) error = validateCombo( value,[ 'REQUIRED','NOSPACE','NODIGIT' ] )\r\n        if ( name === 'department' ) error = validateCombo( value,[ 'REQUIRED' ] )\r\n        if ( name === 'gender' ) error = validateCombo( value,[ 'REQUIRED' ] )\r\n        if ( name === 'dob' ) error = validateCombo( value,[ 'REQUIRED' ] )\r\n        if ( name === 'joiningdate' ) error = validateCombo( value,[ 'REQUIRED' ] )\r\n        if ( name === 'previousexp' ) error = validateCombo( value,[ 'REQUIRED','DIGIT' ] )\r\n        if ( name === 'salary' ) error = validateCombo( value,[ 'REQUIRED','DIGIT' ] )\r\n        if ( name === 'address' ) error = validateCombo( value,[ 'REQUIRED' ] )\r\n        if ( name )\r\n            setEmpDataError( prevState => ( {\r\n                ...prevState,\r\n                [ `${name}error` ]: error\r\n            } ) )\r\n        if ( !name )\r\n            setEmpDataError( {\r\n                empcodeerror: validateCombo( empdata.empcode,[ 'REQUIRED','ALPHANUMERIC','NOSPACE' ] ),\r\n                nameerror: validateCombo( empdata.name,[ 'REQUIRED','NOSPACE','NODIGIT' ] ),\r\n                departmenterror: validateCombo( empdata.department,[ 'REQUIRED' ] ),\r\n                gendererror: validateCombo( empdata.gender,[ 'REQUIRED' ] ),\r\n                doberror: validateCombo( empdata.dob,[ 'REQUIRED' ] ),\r\n                joiningdateerror: validateCombo( empdata.joiningdate,[ 'REQUIRED' ] ),\r\n                previousexperror: validateCombo( empdata.previousexp,[ 'REQUIRED','DIGIT' ] ),\r\n                salaryerror: validateCombo( empdata.salary,[ 'REQUIRED','DIGIT' ] ),\r\n                addresserror: validateCombo( empdata.address,[ 'REQUIRED' ] ),\r\n            } )\r\n\r\n    }\r\n    function isObjectEmpty ( obj ) {\r\n        Object.entries( obj ).map( val => {\r\n            if ( val[ 1 ] ) {\r\n                console.log( val[ 0 ],' : ',val[ 1 ] );\r\n                return true\r\n            }\r\n        } )\r\n        // for ( var prop in obj ) {\r\n        //     if ( obj.hasOwnProperty( prop ) ) {\r\n        //         if ( obj[ prop ] ) return false\r\n        //     }\r\n        // }\r\n        // return true\r\n    }\r\n\r\n    const resetFrom = () => {\r\n        setEmpData( prevState => {\r\n            return {\r\n                ...prevState,\r\n                id: '',\r\n                empcode: '',\r\n                name: '',\r\n                department: '',\r\n                gender: '',\r\n                dob: '',\r\n                joiningdate: '',\r\n                previousexp: '',\r\n                salary: '',\r\n                address: '',\r\n            }\r\n        } )\r\n    }\r\n\r\n    const resetFormError = () => {\r\n        setEmpDataError( formerror )\r\n    }\r\n\r\n    const handleChange = ( e ) => {\r\n        e.persist()\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        if(empdata.update) setValidateNow(true)\r\n        // console.log( `%c${name} : ${value}`,'background:linear-gradient(skyblue,darkblue);color:white;padding:10px;border-radius:30px' )\r\n        setEmpData( ( prevState ) => { return { ...prevState,[ name ]: value } } )\r\n        setShowAlert( false )\r\n        checkValidity( name,value )\r\n    }\r\n\r\n    const onUpdateHandler = async ( e ) => {\r\n        e.preventDefault()\r\n        await checkValidity()\r\n        const error = isObjectEmpty( empdataerror )\r\n        console.log( JSON.stringify( empdataerror ),error )\r\n        if ( error === false ) {\r\n            setShowAlert( true )\r\n            return setEmpData( prevState => { return { ...prevState,alertType: 'warning',alertMsg: 'Please fill all the details correctly' } } )\r\n        }\r\n\r\n\r\n        const updatteddata = {\r\n            empcode: empdata.empcode,\r\n            name: empdata.name,\r\n            department: empdata.department,\r\n            gender: empdata.gender,\r\n            dob: empdata.dob,\r\n            joiningdate: empdata.joiningdate,\r\n            previousexp: empdata.previousexp,\r\n            salary: empdata.salary,\r\n            address: empdata.address,\r\n        }\r\n\r\n        try {\r\n            const res = await axios.patch( `/tasks/${empdata._id}`,updatteddata )\r\n            setEmpData( prevState => { return { ...prevState,update: false } } )\r\n            navigate( '/datatable' )\r\n            resetFrom()\r\n            resetFormError()\r\n            console.log( res )\r\n        } catch ( error ) {\r\n            console.log( error )\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = async ( e ) => {\r\n        e.preventDefault()\r\n        await checkValidity()\r\n        setValidateNow( true )\r\n        const error = isObjectEmpty( empdataerror )\r\n        if ( error === false ) {\r\n            setShowAlert( true )\r\n            return setEmpData( prevState => { return { ...prevState,alertType: 'warning',alertMsg: 'Please fill all the details correctly' } } )\r\n        }\r\n\r\n        const submitteddata = {\r\n            empcode: empdata.empcode,\r\n            name: empdata.name,\r\n            department: empdata.department,\r\n            gender: empdata.gender,\r\n            dob: empdata.dob,\r\n            joiningdate: empdata.joiningdate,\r\n            previousexp: empdata.previousexp,\r\n            salary: empdata.salary,\r\n            address: empdata.address,\r\n        }\r\n\r\n        // console.log( submitteddata )\r\n\r\n        try {\r\n            const res = await axios.post( `/tasks`,submitteddata )\r\n            navigate( '/datatable' )\r\n            setEmpData( prevState => { return { ...prevState,update: false } } )\r\n            resetFrom()\r\n            resetFormError()\r\n            console.log( res )\r\n        } catch ( error ) {\r\n            console.log( error )\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { showalert &&\r\n                <div onClick={ () => {\r\n                    setShowAlert( false )\r\n                    // setEmpData( prevState => { return { ...prevState,showAlert: false } } )\r\n                } }\r\n                    className='bg-warning ' style={ { cursor: 'cell' } } >\r\n                    <h1 className='text-center text-white' style={ { textShadow: '3px 3px 3px rgba(0,0,0,.3)' } } >{ empdata.alertMsg }</h1>\r\n                </div>\r\n            }\r\n\r\n            <Container>\r\n                {/* Insert Form */ }\r\n                <Form noValidate autoComplete='off'\r\n                    onSubmit={ empdata.update && onUpdateHandler || onSubmitHandler }\r\n                    className='my-5'>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={ Col } md='4' >\r\n                            <Form.Label>Emp Code</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                name='empcode'\r\n                                onFocus={ handleChange }\r\n                                onChange={ handleChange }\r\n                                value={ empdata.empcode }\r\n                                placeholder='Emp Code'\r\n                            />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.empcodeerror } /> \r\n                        </Form.Group>\r\n                        <Form.Group as={ Col } md='4' >\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Name'\r\n                                name='name'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.name }\r\n                            />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.nameerror } /> \r\n                        </Form.Group>\r\n                        <Form.Group as={ Col } md='4' >\r\n                            <Form.Label>Department</Form.Label>\r\n                            <select\r\n                                className='form-control'\r\n                                // as='select'\r\n                                type='select'\r\n                                placeholder='Department'\r\n                                name='department'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.department }\r\n                            >\r\n                                <option></option>\r\n                                <option >Admin</option>\r\n                                <option >Technology</option>\r\n                                <option >Accounts</option>\r\n                            </select>\r\n                            <InputError validatenow={validatenow} message={ empdataerror.departmenterror } /> \r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label className='mr-4 '>Gender :</Form.Label>\r\n                        <Form.Check\r\n                            className='mr-3 '\r\n                            inline\r\n                            type='radio'\r\n                            id='Male'\r\n                            name='gender'\r\n                            label='Male'\r\n                            onChange={ handleChange }\r\n                            value='male'\r\n                            checked={ empdata.gender === 'male' ? true : false }\r\n                        // defaultChecked={empdata.gender.male}\r\n                        />\r\n                        <Form.Check\r\n                            className='mr-3 '\r\n                            inline\r\n                            type='radio'\r\n                            name='gender'\r\n                            id='Female'\r\n                            label='Female'\r\n                            onChange={ handleChange }\r\n                            value='female'\r\n                            checked={ empdata.gender === 'female' ? true : false }\r\n                        // defaultChecked={empdata.gender.female}\r\n                        />\r\n                        <InputError validatenow={validatenow} message={ empdataerror.gendererror } /> \r\n                    </Form.Group>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={ Col } md='3' >\r\n                            <Form.Label>Date of birth</Form.Label>\r\n                            <Form.Control\r\n                                type='date'\r\n                                placeholder='Date of birth'\r\n                                name='dob'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.dob }\r\n                            />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.doberror } /> \r\n                        </Form.Group>\r\n                        <Form.Group as={ Col } md='3' >\r\n                            <Form.Label>Joining Date</Form.Label>\r\n                            <Form.Control\r\n                                type='date'\r\n                                placeholder='Joining Date'\r\n                                name='joiningdate'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.joiningdate }\r\n                            />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.joiningdateerror } /> \r\n                        </Form.Group>\r\n                        <Form.Group as={ Col } md='3' >\r\n                            <Form.Label>Previous Exp (years)</Form.Label>\r\n                            <Form.Control\r\n                                type='text'\r\n                                placeholder='Previous Exp'\r\n                                name='previousexp'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.previousexp }\r\n                            />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.previousexperror } /> \r\n                        </Form.Group>\r\n                        <Form.Group as={ Col } md='3' >\r\n                            <Form.Label>Salary</Form.Label>\r\n                            <Form.Control type='text'\r\n                                placeholder='Salary'\r\n                                name='salary'\r\n                                onChange={ handleChange }\r\n                                value={ empdata.salary } />\r\n                            <InputError validatenow={validatenow} message={ empdataerror.salaryerror } /> \r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group >\r\n                        <Form.Label>Address</Form.Label>\r\n                        <Form.Control\r\n                            as='textarea'\r\n                            type='textarea'\r\n                            placeholder='Address'\r\n                            name='address'\r\n                            onChange={ handleChange }\r\n                            value={ empdata.address }\r\n                        />\r\n                        <InputError validatenow={validatenow} message={ empdataerror.addresserror } /> \r\n                    </Form.Group>\r\n\r\n                    <Button type='submit'>{ empdata.update && 'Update' || 'Submit' } form</Button>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default EmpForm","import React,{ useContext,useEffect,useState } from 'react'\r\nimport axios from '../api/baseUrl.js'\r\nimport {\r\n    Button,\r\n    Table,\r\n} from 'react-bootstrap'\r\nimport { empdatacontext } from '../context/EmpDataContext'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst DataTable = () => {\r\n    const [ refresh,setRefresh ] = useState( false )\r\n    const { empdata,setEmpData } = useContext( empdatacontext )\r\n\r\n    const onRefresh = () => setRefresh( prevState => !prevState )\r\n\r\n    useEffect( () => {\r\n        fetchAllRecords()\r\n        return () => fetchAllRecords()\r\n    },[refresh] )\r\n\r\n    const fetchAllRecords = async () => {\r\n        try {\r\n            const res = await axios.get( '/tasks' )\r\n            let data = res.data\r\n            data = data.map( val => {\r\n                return {\r\n                    ...val,\r\n                    dob: formateDate( val.dob ),\r\n                    joiningdate: formateDate( val.joiningdate )\r\n                }\r\n            } )\r\n            // console.log( data )\r\n            setEmpData( prevState => { return { ...prevState,records: data } } )\r\n        } catch ( error ) {\r\n            console.log( error.message )\r\n        }\r\n    }\r\n\r\n    const onEditHandler = ( _id ) => {\r\n        empdata.records.filter( record => {\r\n            if ( record._id === _id )\r\n                setEmpData( prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        _id,\r\n                        empcode: record.empcode,\r\n                        name: record.name,\r\n                        department: record.department,\r\n                        gender: record.gender,\r\n                        dob: record.dob,\r\n                        joiningdate: record.joiningdate,\r\n                        previousexp: record.previousexp,\r\n                        salary: record.salary,\r\n                        address: record.address,\r\n                        update: true,\r\n                    }\r\n                } )\r\n        } )\r\n    }\r\n\r\n    const deleteRecord = async ( id ) => {\r\n        // console.log( id )\r\n        try {\r\n            const res = await axios.delete( `/tasks/${id}` )\r\n            console.log( res )\r\n        } catch ( error ) {\r\n            console.log( error )\r\n        }\r\n    }\r\n\r\n    const formateDate = ( datetime,reverse ) => {\r\n        // console.log( datetime );\r\n        const date = new Date( datetime )\r\n        let newdate = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\r\n        newdate = newdate.split( '-' ).map( val => val.split( '' ).length === 1 ? `0${val}` : val ).join( '-' )\r\n        return newdate\r\n    }\r\n    // val.split( '' ).length === 1 ? `0${val}` : val\r\n\r\n    return (\r\n        <div className='mt-3 mx-3 mx-xl-auto shadow ' style={ { maxWidth: '1200px' } }>\r\n            <Table striped bordered hover size='sm' responsive className=' bg-white'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>empcode</th>\r\n                        <th>Name</th>\r\n                        <th>Department</th>\r\n                        <th>Gender</th>\r\n                        <th>DDB</th>\r\n                        <th>Joining Date</th>\r\n                        <th>Previous Exp (years)</th>\r\n                        <th>Salary</th>\r\n                        <th>Address</th>\r\n                        <th colSpan='2' className='text-center'>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { empdata.records &&\r\n                        empdata.records.map( ( record ) => {\r\n                            return (\r\n                                <tr key={ `empdata${record._id}` }>\r\n                                    <td>{ record.empcode }</td>\r\n                                    <td>{ record.name }</td>\r\n                                    <td>{ record.department }</td>\r\n                                    <td>{ record.gender }</td>\r\n                                    <td>{ record.dob }</td>\r\n                                    <td>{ record.joiningdate }</td>\r\n                                    <td>{ record.previousexp }</td>\r\n                                    <td>{ record.salary }</td>\r\n                                    <td>{ record.address }</td>\r\n                                    <td>\r\n                                        <NavLink to='/'>\r\n                                            <Button\r\n                                                variant='info'\r\n                                                onClick={ () => onEditHandler( record._id ) }>\r\n                                                Edit\r\n                                            </Button>\r\n                                        </NavLink>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Button\r\n                                            variant='danger'\r\n                                            onClick={ () => { deleteRecord( record._id );onRefresh() } }>\r\n                                            Delete\r\n                                        </Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        } ) }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataTable","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className='row m-0 justify-content-center '>\r\n            <div className='col-12 col-sm-8 col-lg-6 py-1'>\r\n                <div className='row  g-1 text-center ' >\r\n                    <div className='col'>\r\n                        <NavLink to='/' className='h-100'>\r\n                            <button className='col btn btn-primary  shadow rounded-lg  h-100' >Employee Table</button>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className='col'>\r\n                        <NavLink to='/datatable' className='h-100'>\r\n                            <button className='col btn btn-primary  shadow rounded-lg h-100' >Data Table</button>\r\n                        </NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\nimport { Route,Routes } from 'react-router-dom'\nimport EmpForm from './pages/EmpForm'\nimport DataTable from './pages/DataTable'\nimport Navbar from './components/Navbar'\n\n\nconst App = () => {\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\t\t\t<Routes>\n\t\t\t\t<Route path='/' element={ <EmpForm /> } />\n\t\t\t\t<Route path='/datatable' element={ <DataTable /> } />\n\t\t\t</Routes>\n\t\t</>\n\t)\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport EmpDataProvider from \"./context/EmpDataContext\";\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<EmpDataProvider>\n\t\t\t<App />\n\t\t</EmpDataProvider>\n\t</BrowserRouter>\n\t,document.getElementById( \"root\" )\n);\n"],"sourceRoot":""}